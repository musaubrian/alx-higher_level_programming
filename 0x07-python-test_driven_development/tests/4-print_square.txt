The ``4-print_square`` module prints a square pattern using the ``#`` char

How it should work::
====================
>>> print_square = __import__('4-print_square').print_square
>>> print_square(4)
####
####
####
####

When no argument is passed::
============================
>>> print_square()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: print_square() missing 1 required positional argument: 'size'

When size is < 0::
==================
>>> print_square(-3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/ernest/unit-test/4-print_square.py", line 24, in print_square
    raise ValueError("size must be >= 0")
ValueError: size must be >= 0

When two arguments are passed::
===============================
>>> print_square(2, 7)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: print_square() takes 1 positional argument but 2 were given

When size passed is 0::
=======================
>>> print_square(0)
